"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferencesToolsComprehensiveTester = void 0;
class PreferencesToolsComprehensiveTester {
    constructor() {
        this.results = [];
        // Import the PreferencesTools class for testing
        try {
            const { PreferencesTools } = require('../tools/preferences-tools');
            this.preferencesTools = new PreferencesTools();
        }
        catch (error) {
            console.error('Failed to import PreferencesTools:', error);
        }
    }
    async runTest(testName, tool, action, params, expectedBehavior, aiPromptClarity = 'good') {
        const startTime = Date.now();
        const result = {
            testName,
            tool,
            action,
            success: false,
            time: 0,
            parameters: params,
            expectedBehavior,
            aiPromptClarity
        };
        try {
            const response = await this.preferencesTools.execute(tool, params);
            result.success = response.success;
            result.result = response;
            if (!response.success) {
                result.error = response.error || 'Unknown error';
            }
        }
        catch (error) {
            result.success = false;
            result.error = error instanceof Error ? error.message : String(error);
        }
        result.time = Date.now() - startTime;
        this.results.push(result);
        console.log(`Test: ${testName} - ${result.success ? 'PASS' : 'FAIL'} (${result.time}ms)`);
        if (!result.success) {
            console.log(`  Error: ${result.error}`);
        }
        return result;
    }
    // Test 1: preferences_manage tool - open_panel action
    async testPreferencesManageOpenPanel() {
        console.log('\n=== Testing preferences_manage - open_panel ===');
        // Test 1.1: Open panel without specific tab
        await this.runTest('Open preferences panel (default)', 'preferences_manage', 'open_panel', { action: 'open_panel' }, 'Should open preferences panel on default tab', 'excellent');
        // Test 1.2: Open panel with each valid tab
        const validTabs = ['general', 'external-tools', 'data-editor', 'laboratory', 'extensions', 'preview', 'console', 'native', 'builder'];
        for (const tab of validTabs) {
            await this.runTest(`Open preferences panel on ${tab} tab`, 'preferences_manage', 'open_panel', { action: 'open_panel', tab }, `Should open preferences panel on ${tab} tab`, 'excellent');
        }
        // Test 1.3: Test with invalid tab
        await this.runTest('Open preferences panel with invalid tab', 'preferences_manage', 'open_panel', { action: 'open_panel', tab: 'invalid-tab' }, 'Should handle invalid tab gracefully or show error', 'good');
    }
    // Test 2: preferences_manage tool - get_config action
    async testPreferencesManageGetConfig() {
        console.log('\n=== Testing preferences_manage - get_config ===');
        const categories = ['general', 'external-tools', 'data-editor', 'laboratory', 'extensions', 'preview', 'console', 'native', 'builder'];
        const scopes = ['global', 'local', 'default'];
        // Test 2.1: Get entire category config for each scope
        for (const category of categories) {
            for (const scope of scopes) {
                await this.runTest(`Get ${category} config (${scope} scope)`, 'preferences_manage', 'get_config', { action: 'get_config', category, scope }, `Should return ${category} configuration for ${scope} scope`, 'excellent');
            }
        }
        // Test 2.2: Get specific config paths
        const testPaths = [
            { category: 'general', path: 'language' },
            { category: 'general', path: 'theme' },
            { category: 'console', path: 'level' },
            { category: 'preview', path: 'resolution' }
        ];
        for (const testPath of testPaths) {
            await this.runTest(`Get specific config: ${testPath.category}.${testPath.path}`, 'preferences_manage', 'get_config', { action: 'get_config', category: testPath.category, path: testPath.path }, `Should return specific configuration value for ${testPath.category}.${testPath.path}`, 'excellent');
        }
        // Test 2.3: Test with nested paths (dot notation)
        await this.runTest('Get nested config path', 'preferences_manage', 'get_config', { action: 'get_config', category: 'general', path: 'editor.fontSize' }, 'Should handle nested path with dot notation', 'good');
        // Test 2.4: Test error cases
        await this.runTest('Get config with invalid category', 'preferences_manage', 'get_config', { action: 'get_config', category: 'invalid-category' }, 'Should return error for invalid category', 'good');
        await this.runTest('Get config without required category', 'preferences_manage', 'get_config', { action: 'get_config' }, 'Should return error for missing required category parameter', 'good');
    }
    // Test 3: preferences_manage tool - set_config action
    async testPreferencesManageSetConfig() {
        console.log('\n=== Testing preferences_manage - set_config ===');
        // Test 3.1: Set different data types
        const testValues = [
            { category: 'general', path: 'test.string', value: 'test-value', type: 'string' },
            { category: 'general', path: 'test.number', value: 42, type: 'number' },
            { category: 'general', path: 'test.boolean', value: true, type: 'boolean' },
            { category: 'general', path: 'test.object', value: { key: 'value', nested: { prop: 123 } }, type: 'object' },
            { category: 'general', path: 'test.array', value: [1, 2, 3, 'test'], type: 'array' }
        ];
        for (const testValue of testValues) {
            await this.runTest(`Set ${testValue.type} value: ${testValue.path}`, 'preferences_manage', 'set_config', {
                action: 'set_config',
                category: testValue.category,
                path: testValue.path,
                value: testValue.value
            }, `Should set ${testValue.type} value for ${testValue.path}`, 'excellent');
        }
        // Test 3.2: Test with different scopes
        for (const scope of ['global', 'local']) {
            await this.runTest(`Set config with ${scope} scope`, 'preferences_manage', 'set_config', {
                action: 'set_config',
                category: 'general',
                path: 'test.scope',
                value: `${scope}-value`,
                scope
            }, `Should set configuration in ${scope} scope`, 'excellent');
        }
        // Test 3.3: Test error cases
        await this.runTest('Set config with missing required parameters', 'preferences_manage', 'set_config', { action: 'set_config', category: 'general' }, 'Should return error for missing required path and value parameters', 'good');
        await this.runTest('Set config with invalid category', 'preferences_manage', 'set_config', { action: 'set_config', category: 'invalid-category', path: 'test', value: 'test' }, 'Should return error for invalid category', 'good');
    }
    // Test 4: preferences_manage tool - reset_config action
    async testPreferencesManageResetConfig() {
        console.log('\n=== Testing preferences_manage - reset_config ===');
        const categories = ['general', 'external-tools', 'data-editor'];
        // Test 4.1: Reset each category
        for (const category of categories) {
            await this.runTest(`Reset ${category} to defaults`, 'preferences_manage', 'reset_config', { action: 'reset_config', category }, `Should reset ${category} preferences to default values`, 'excellent');
        }
        // Test 4.2: Reset with different scopes
        for (const scope of ['global', 'local']) {
            await this.runTest(`Reset general config (${scope} scope)`, 'preferences_manage', 'reset_config', { action: 'reset_config', category: 'general', scope }, `Should reset general preferences in ${scope} scope`, 'excellent');
        }
        // Test 4.3: Test error cases
        await this.runTest('Reset config with invalid category', 'preferences_manage', 'reset_config', { action: 'reset_config', category: 'invalid-category' }, 'Should return error for invalid category', 'good');
        await this.runTest('Reset config without required category', 'preferences_manage', 'reset_config', { action: 'reset_config' }, 'Should return error for missing required category parameter', 'good');
    }
    // Test 5: preferences_query tool - get_all action
    async testPreferencesQueryGetAll() {
        console.log('\n=== Testing preferences_query - get_all ===');
        // Test 5.1: Get all preferences with different scopes
        for (const scope of ['global', 'local', 'default']) {
            await this.runTest(`Get all preferences (${scope} scope)`, 'preferences_query', 'get_all', { action: 'get_all', scope }, `Should return all preferences for ${scope} scope`, 'excellent');
        }
        // Test 5.2: Get specific categories
        const categoryTests = [
            { categories: ['general'] },
            { categories: ['general', 'console'] },
            { categories: ['external-tools', 'data-editor', 'preview'] }
        ];
        for (const test of categoryTests) {
            await this.runTest(`Get specific categories: ${test.categories.join(', ')}`, 'preferences_query', 'get_all', { action: 'get_all', categories: test.categories }, `Should return preferences for specified categories: ${test.categories.join(', ')}`, 'excellent');
        }
        // Test 5.3: Combine scope and categories
        await this.runTest('Get specific categories with local scope', 'preferences_query', 'get_all', { action: 'get_all', scope: 'local', categories: ['general', 'preview'] }, 'Should return local scope preferences for general and preview categories', 'excellent');
        // Test 5.4: Test with invalid categories
        await this.runTest('Get all with invalid categories', 'preferences_query', 'get_all', { action: 'get_all', categories: ['invalid-category', 'general'] }, 'Should handle invalid categories gracefully and return valid ones', 'good');
    }
    // Test 6: preferences_query tool - list_categories action
    async testPreferencesQueryListCategories() {
        console.log('\n=== Testing preferences_query - list_categories ===');
        // Test 6.1: List all categories
        await this.runTest('List all preference categories', 'preferences_query', 'list_categories', { action: 'list_categories' }, 'Should return list of all available preference categories with descriptions', 'excellent');
    }
    // Test 7: preferences_query tool - search_settings action
    async testPreferencesQuerySearchSettings() {
        console.log('\n=== Testing preferences_query - search_settings ===');
        // Test 7.1: Search with different keywords
        const searchKeywords = [
            'language',
            'theme',
            'font',
            'path',
            'console',
            'debug'
        ];
        for (const keyword of searchKeywords) {
            await this.runTest(`Search settings for "${keyword}"`, 'preferences_query', 'search_settings', { action: 'search_settings', keyword }, `Should find settings containing keyword "${keyword}"`, 'excellent');
        }
        // Test 7.2: Search with and without values
        await this.runTest('Search with includeValues=true', 'preferences_query', 'search_settings', { action: 'search_settings', keyword: 'language', includeValues: true }, 'Should return search results with current values included', 'excellent');
        await this.runTest('Search with includeValues=false', 'preferences_query', 'search_settings', { action: 'search_settings', keyword: 'language', includeValues: false }, 'Should return search results without current values', 'excellent');
        // Test 7.3: Test edge cases
        await this.runTest('Search with empty keyword', 'preferences_query', 'search_settings', { action: 'search_settings', keyword: '' }, 'Should handle empty keyword appropriately', 'fair');
        await this.runTest('Search with non-existent keyword', 'preferences_query', 'search_settings', { action: 'search_settings', keyword: 'non-existent-setting-xyz123' }, 'Should return empty results for non-existent keyword', 'good');
        await this.runTest('Search without required keyword', 'preferences_query', 'search_settings', { action: 'search_settings' }, 'Should return error for missing required keyword parameter', 'good');
    }
    // Test 8: preferences_backup tool - export action
    async testPreferencesBackupExport() {
        console.log('\n=== Testing preferences_backup - export ===');
        // Test 8.1: Export all preferences
        await this.runTest('Export all preferences (default)', 'preferences_backup', 'export', { action: 'export' }, 'Should export all preferences with default settings', 'excellent');
        // Test 8.2: Export with different scopes
        for (const scope of ['global', 'local']) {
            await this.runTest(`Export preferences (${scope} scope)`, 'preferences_backup', 'export', { action: 'export', scope }, `Should export preferences from ${scope} scope`, 'excellent');
        }
        // Test 8.3: Export specific categories
        await this.runTest('Export specific categories', 'preferences_backup', 'export', { action: 'export', categories: ['general', 'console', 'preview'] }, 'Should export only specified categories', 'excellent');
        // Test 8.4: Export with includeDefaults
        await this.runTest('Export with defaults included', 'preferences_backup', 'export', { action: 'export', includeDefaults: true }, 'Should export preferences including default values', 'excellent');
        await this.runTest('Export without defaults', 'preferences_backup', 'export', { action: 'export', includeDefaults: false }, 'Should export preferences without default values', 'excellent');
        // Test 8.5: Comprehensive export test
        await this.runTest('Export with all parameters', 'preferences_backup', 'export', {
            action: 'export',
            categories: ['general', 'external-tools'],
            scope: 'global',
            includeDefaults: true
        }, 'Should export specified categories from global scope with defaults', 'excellent');
    }
    // Test 9: preferences_backup tool - validate_backup action
    async testPreferencesBackupValidate() {
        console.log('\n=== Testing preferences_backup - validate_backup ===');
        // Test 9.1: Valid backup data
        const validBackupData = {
            metadata: {
                exportDate: new Date().toISOString(),
                scope: 'global',
                includeDefaults: false,
                cocosVersion: '3.8.0',
                exportedCategories: ['general', 'console']
            },
            preferences: {
                general: {
                    language: 'en',
                    theme: 'dark'
                },
                console: {
                    level: 'info'
                }
            }
        };
        await this.runTest('Validate valid backup data', 'preferences_backup', 'validate_backup', { action: 'validate_backup', backupData: validBackupData }, 'Should validate valid backup data successfully', 'excellent');
        // Test 9.2: Backup data with warnings
        const backupWithWarnings = {
            preferences: {
                general: {
                    language: 'en'
                }
            }
            // Missing metadata
        };
        await this.runTest('Validate backup data with warnings', 'preferences_backup', 'validate_backup', { action: 'validate_backup', backupData: backupWithWarnings }, 'Should validate backup data and report warnings for missing metadata', 'good');
        // Test 9.3: Invalid backup data
        const invalidBackupData = [
            { description: 'null data', data: null },
            { description: 'string data', data: 'invalid' },
            { description: 'number data', data: 123 },
            { description: 'missing preferences', data: { metadata: {} } },
            { description: 'invalid preferences type', data: { preferences: 'invalid' } },
            { description: 'empty preferences', data: { preferences: {} } }
        ];
        for (const testCase of invalidBackupData) {
            await this.runTest(`Validate invalid backup: ${testCase.description}`, 'preferences_backup', 'validate_backup', { action: 'validate_backup', backupData: testCase.data }, `Should detect invalid backup data: ${testCase.description}`, 'good');
        }
        // Test 9.4: Missing required parameter
        await this.runTest('Validate without backup data parameter', 'preferences_backup', 'validate_backup', { action: 'validate_backup' }, 'Should return error for missing required backupData parameter', 'good');
    }
    // Test 10: Error handling and edge cases
    async testErrorHandling() {
        console.log('\n=== Testing Error Handling ===');
        // Test 10.1: Invalid tool names
        try {
            await this.preferencesTools.execute('invalid_tool', { action: 'test' });
        }
        catch (error) {
            this.results.push({
                testName: 'Invalid tool name',
                tool: 'invalid_tool',
                action: 'test',
                success: false,
                error: error instanceof Error ? error.message : String(error),
                time: 0,
                expectedBehavior: 'Should throw error for invalid tool name',
                aiPromptClarity: 'good'
            });
        }
        // Test 10.2: Invalid actions for each tool
        const invalidActionTests = [
            { tool: 'preferences_manage', action: 'invalid_action' },
            { tool: 'preferences_query', action: 'invalid_action' },
            { tool: 'preferences_backup', action: 'invalid_action' }
        ];
        for (const test of invalidActionTests) {
            await this.runTest(`Invalid action for ${test.tool}`, test.tool, test.action, { action: test.action }, `Should return error for invalid action: ${test.action}`, 'good');
        }
        // Test 10.3: Invalid scope values
        await this.runTest('Invalid scope value', 'preferences_manage', 'get_config', { action: 'get_config', category: 'general', scope: 'invalid-scope' }, 'Should handle invalid scope value appropriately', 'fair');
    }
    // Main test runner
    async runComprehensiveTests() {
        console.log('🚀 Starting Comprehensive Preferences Tools Test Suite');
        console.log('='.repeat(60));
        this.results = [];
        const startTime = Date.now();
        try {
            // Run all test categories
            await this.testPreferencesManageOpenPanel();
            await this.testPreferencesManageGetConfig();
            await this.testPreferencesManageSetConfig();
            await this.testPreferencesManageResetConfig();
            await this.testPreferencesQueryGetAll();
            await this.testPreferencesQueryListCategories();
            await this.testPreferencesQuerySearchSettings();
            await this.testPreferencesBackupExport();
            await this.testPreferencesBackupValidate();
            await this.testErrorHandling();
        }
        catch (error) {
            console.error('Test suite failed:', error);
        }
        const totalTime = Date.now() - startTime;
        return this.generateComprehensiveReport(totalTime);
    }
    generateComprehensiveReport(totalTime) {
        const total = this.results.length;
        const passed = this.results.filter(r => r.success).length;
        const failed = total - passed;
        // Group results by tool and action
        const groupedResults = this.groupResultsByToolAndAction();
        // Analyze AI prompt clarity
        const clarityAnalysis = this.analyzeClarityRatings();
        // Performance analysis
        const performanceAnalysis = this.analyzePerformance();
        const report = {
            summary: {
                totalTests: total,
                passed,
                failed,
                passRate: total > 0 ? ((passed / total) * 100).toFixed(2) + '%' : '0%',
                totalTime: totalTime + 'ms',
                averageTestTime: total > 0 ? (totalTime / total).toFixed(2) + 'ms' : '0ms'
            },
            toolCoverage: {
                preferences_manage: {
                    actions: ['open_panel', 'get_config', 'set_config', 'reset_config'],
                    tested: this.getTestedActions('preferences_manage'),
                    coverage: this.calculateActionCoverage('preferences_manage', 4)
                },
                preferences_query: {
                    actions: ['get_all', 'list_categories', 'search_settings'],
                    tested: this.getTestedActions('preferences_query'),
                    coverage: this.calculateActionCoverage('preferences_query', 3)
                },
                preferences_backup: {
                    actions: ['export', 'validate_backup'],
                    tested: this.getTestedActions('preferences_backup'),
                    coverage: this.calculateActionCoverage('preferences_backup', 2)
                }
            },
            clarityAnalysis,
            performanceAnalysis,
            detailedResults: groupedResults,
            errorAnalysis: this.analyzeErrors(),
            recommendations: this.generateRecommendations()
        };
        this.printDetailedReport(report);
        return report;
    }
    groupResultsByToolAndAction() {
        const grouped = {};
        for (const result of this.results) {
            if (!grouped[result.tool]) {
                grouped[result.tool] = {};
            }
            if (!grouped[result.tool][result.action]) {
                grouped[result.tool][result.action] = [];
            }
            grouped[result.tool][result.action].push(result);
        }
        return grouped;
    }
    getTestedActions(tool) {
        const actions = new Set();
        for (const result of this.results) {
            if (result.tool === tool) {
                actions.add(result.action);
            }
        }
        return Array.from(actions);
    }
    calculateActionCoverage(tool, totalActions) {
        const testedActions = this.getTestedActions(tool).length;
        return ((testedActions / totalActions) * 100).toFixed(0) + '%';
    }
    analyzeClarityRatings() {
        const ratings = this.results.map(r => r.aiPromptClarity);
        const counts = {
            excellent: ratings.filter(r => r === 'excellent').length,
            good: ratings.filter(r => r === 'good').length,
            fair: ratings.filter(r => r === 'fair').length,
            poor: ratings.filter(r => r === 'poor').length
        };
        return {
            distribution: counts,
            averageScore: this.calculateAverageClarity(ratings),
            total: ratings.length
        };
    }
    calculateAverageClarity(ratings) {
        const scoreMap = { excellent: 4, good: 3, fair: 2, poor: 1 };
        const totalScore = ratings.reduce((sum, rating) => sum + scoreMap[rating], 0);
        return ratings.length > 0 ? (totalScore / ratings.length) : 0;
    }
    analyzePerformance() {
        const times = this.results.map(r => r.time).filter(t => t > 0);
        if (times.length === 0)
            return { average: 0, min: 0, max: 0, total: 0 };
        return {
            average: (times.reduce((sum, time) => sum + time, 0) / times.length).toFixed(2) + 'ms',
            min: Math.min(...times) + 'ms',
            max: Math.max(...times) + 'ms',
            total: times.reduce((sum, time) => sum + time, 0) + 'ms'
        };
    }
    analyzeErrors() {
        const errors = this.results.filter(r => !r.success);
        const errorTypes = {};
        for (const error of errors) {
            const errorMsg = error.error || 'Unknown error';
            const errorType = this.categorizeError(errorMsg);
            errorTypes[errorType] = (errorTypes[errorType] || 0) + 1;
        }
        return {
            totalErrors: errors.length,
            errorTypes,
            commonErrors: Object.entries(errorTypes)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 5)
        };
    }
    categorizeError(errorMsg) {
        if (errorMsg.includes('Unknown tool'))
            return 'Invalid Tool';
        if (errorMsg.includes('Unknown') && errorMsg.includes('action'))
            return 'Invalid Action';
        if (errorMsg.includes('required'))
            return 'Missing Parameter';
        if (errorMsg.includes('invalid') || errorMsg.includes('Invalid'))
            return 'Invalid Parameter';
        if (errorMsg.includes('Failed to'))
            return 'Operation Failed';
        return 'Other';
    }
    generateRecommendations() {
        const recommendations = [];
        const failureRate = (this.results.filter(r => !r.success).length / this.results.length) * 100;
        if (failureRate > 20) {
            recommendations.push('High failure rate detected. Review parameter validation and error handling.');
        }
        const clarityAnalysis = this.analyzeClarityRatings();
        if (clarityAnalysis.averageScore < 3) {
            recommendations.push('AI prompt clarity could be improved. Consider more descriptive parameter descriptions.');
        }
        const errors = this.analyzeErrors();
        if (errors.errorTypes['Missing Parameter'] > 3) {
            recommendations.push('Many missing parameter errors. Consider adding better default values or validation.');
        }
        if (errors.errorTypes['Invalid Parameter'] > 3) {
            recommendations.push('Multiple invalid parameter errors. Strengthen input validation.');
        }
        if (recommendations.length === 0) {
            recommendations.push('Overall test results look good. Consider adding more edge case tests.');
        }
        return recommendations;
    }
    printDetailedReport(report) {
        console.log('\n' + '='.repeat(60));
        console.log('📊 COMPREHENSIVE PREFERENCES TOOLS TEST REPORT');
        console.log('='.repeat(60));
        console.log('\n📈 SUMMARY:');
        console.log(`  Total Tests: ${report.summary.totalTests}`);
        console.log(`  Passed: ${report.summary.passed}`);
        console.log(`  Failed: ${report.summary.failed}`);
        console.log(`  Pass Rate: ${report.summary.passRate}`);
        console.log(`  Total Time: ${report.summary.totalTime}`);
        console.log(`  Average Test Time: ${report.summary.averageTestTime}`);
        console.log('\n🎯 TOOL COVERAGE:');
        for (const [tool, coverage] of Object.entries(report.toolCoverage)) {
            const toolCoverage = coverage;
            console.log(`  ${tool}:`);
            console.log(`    Actions: ${toolCoverage.actions.join(', ')}`);
            console.log(`    Tested: ${toolCoverage.tested.join(', ')}`);
            console.log(`    Coverage: ${toolCoverage.coverage}`);
        }
        console.log('\n🧠 AI PROMPT CLARITY ANALYSIS:');
        console.log(`  Excellent: ${report.clarityAnalysis.distribution.excellent}`);
        console.log(`  Good: ${report.clarityAnalysis.distribution.good}`);
        console.log(`  Fair: ${report.clarityAnalysis.distribution.fair}`);
        console.log(`  Poor: ${report.clarityAnalysis.distribution.poor}`);
        console.log(`  Average Score: ${report.clarityAnalysis.averageScore.toFixed(2)}/4.0`);
        console.log('\n⚡ PERFORMANCE ANALYSIS:');
        console.log(`  Average Time: ${report.performanceAnalysis.average}`);
        console.log(`  Min Time: ${report.performanceAnalysis.min}`);
        console.log(`  Max Time: ${report.performanceAnalysis.max}`);
        console.log(`  Total Time: ${report.performanceAnalysis.total}`);
        if (report.errorAnalysis.totalErrors > 0) {
            console.log('\n❌ ERROR ANALYSIS:');
            console.log(`  Total Errors: ${report.errorAnalysis.totalErrors}`);
            console.log('  Common Error Types:');
            for (const [errorType, count] of report.errorAnalysis.commonErrors) {
                console.log(`    ${errorType}: ${count}`);
            }
        }
        console.log('\n💡 RECOMMENDATIONS:');
        for (const recommendation of report.recommendations) {
            console.log(`  • ${recommendation}`);
        }
        console.log('\n' + '='.repeat(60));
        console.log('Test completed successfully! ✅');
        console.log('='.repeat(60));
    }
}
exports.PreferencesToolsComprehensiveTester = PreferencesToolsComprehensiveTester;
// Export the test class for external use
exports.default = PreferencesToolsComprehensiveTester;
//# sourceMappingURL=data:application/json;base64,